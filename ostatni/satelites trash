


def DownloadPassandPrint():
    url = "https://api.n2yo.com/rest/v1/satellite/positions/" + CurrentSatId + "/" + latitude + "/" + longitude + "/" + ObserverAltitude + "/" + "10" + "/&apiKey=" + licenseKey
    GetPositions = urequests.get(url).text

    print(GetPositions)

    GetPositions_json = ujson.loads(GetPositions)
    global ListOfPositions
    ListOfPositions = []
    hilfelist = []

    for i in range(0, 10):  # list naplnim
        hilfelist.append(i)

    for x in hilfelist:
        timestamp = int(ujson.dumps(GetPositions_json["positions"][x]["timestamp"]))
        timestamp = timestamp + (3600 * settings.timezone)
        azimuth = float(ujson.dumps(GetPositions_json["positions"][x]["azimuth"]))
        elevation = float(ujson.dumps(GetPositions_json["positions"][x]["elevation"]))

        PositionTuple = (timestamp, azimuth, elevation)
        ListOfPositions.append(PositionTuple)

    while True:
        if utime.time() == ListOfPositions[1][0]:

            for i in hilfelist:
                print(ListOfPositions[i][2])
                settings.lcd.clear()
                CurAzimuth = str(ListOfPositions[i][1])
                CurElev = str(ListOfPositions[i][2])
                settings.lcd.putstr("az: " + CurAzimuth + "        el: " + CurElev)

                utime.sleep(1)
            Pass_start.pop(1)
            Pass_end.pop[DownloadForDesiredPass.RawID]
            CurrentSatName.pop(DownloadForDesiredPass().RawID)






def DownloadPass_test(): #core 1

    global PositionTuple, ListOfPositions1, ListOfPositions2, TemporaryList, EmptyStatus1, EmptyStatus2

    EmptyStatus1 = True
    EmptyStatus2 = True

    while True:
        ListOfPositions1 = []
        ListOfPositions2 = []

        TemporaryList = []

        seconds = "10"
        url = "https://api.n2yo.com/rest/v1/satellite/positions/" + CurrentSatId + "/" + latitude + "/" + longitude + "/" + ObserverAltitude + "/" + seconds + "/&apiKey=" + licenseKey
        GetPositions = urequests.get(url).text
        GetPositions_json = ujson.loads(GetPositions)

        hilfelist = []

        for i in range(0, int(seconds)):  # list naplnim

            hilfelist.append(i)

        if EmptyStatus2 == True:
            for x in hilfelist:
                timestamp = int(ujson.dumps(GetPositions_json["positions"][x]["timestamp"]))
                timestamp = timestamp + (3600 * settings.timezone)
                azimuth = float(ujson.dumps(GetPositions_json["positions"][x]["azimuth"]))
                elevation = float(ujson.dumps(GetPositions_json["positions"][x]["elevation"]))

                PositionTuple = (timestamp, azimuth, elevation)
                ListOfPositions1.append(PositionTuple)
                # print("funguju1")
            # helpValue= helpValue +1
            EmptyStatus1 = False
            break

        elif EmptyStatus1 == True:
            for x in hilfelist:
                timestamp = int(ujson.dumps(GetPositions_json["positions"][x]["timestamp"]))
                timestamp = timestamp + (3600 * settings.timezone)
                azimuth = float(ujson.dumps(GetPositions_json["positions"][x]["azimuth"]))
                elevation = float(ujson.dumps(GetPositions_json["positions"][x]["elevation"]))

                PositionTuple = (timestamp, azimuth, elevation)
                ListOfPositions2.append(PositionTuple)

                # print("gfunguju2")
            # helpValue= helpValue +1
            EmptyStatus2 = False

            break

        utime.sleep(10)


machine.freq(240000000)
DownloadAPI()

while True:

    DownloadForDesiredPass()

# def PrintPositions():
#
#     while True:
#         helpvalue2 = 0
#
#         if helpvalue2 %2 == 0:
#             while ListOfPositions1[0][0] < utime.time():
#                 print("pop1")
#                 ListOfPositions1.pop(0)
#
#             if utime.time() == ListOfPositions1[0][0]:
#
#                 for i in range (0,len(ListOfPositions1)):
#
#                     print(ListOfPositions1[i][2])
#                     settings.lcd.clear()
#                     CurAzimuth = str(ListOfPositions1[i][1])
#                     CurElev = str(ListOfPositions1[i][2])
#                     settings.lcd.putstr("az1: " + CurAzimuth + "        el: " + CurElev)
#                     utime.sleep(1)
#
#             helpvalue2+=1
#             EmptyStatus1 = True
#             break
#
#
#         elif helpvalue2 %2 == 1:
#             while ListOfPositions2[0][0] < utime.time():
#                 print("pop2")
#                 ListOfPositions2.pop(0)
#
#             if utime.time() == ListOfPositions2[0][0]:
#
#                 for i in range (0, len(ListOfPositions2)):
#                     print(ListOfPositions2[i][2])
#                     settings.lcd.clear()
#                     CurAzimuth = str(ListOfPositions2[i][1])
#                     CurElev = str(ListOfPositions2[i][2])
#                     settings.lcd.putstr("az2: " + CurAzimuth + "        el: " + CurElev)
#
#                     utime.sleep(1)
#             helpvalue2 +=1
#             EmptyStatus2 = True
#
#             #break
#






























    # Pass_start.pop(1)
    # Pass_end.pop[DownloadForDesiredPass.RawID]
    # CurrentSatName.pop(RawID)




# def ControlList():
#     for x in range (0, len(ListOfPositions)):
#         number = x+1
#         if ListOfPositions[number][0] < ListOfPositions[x]:
#             ListOfPositions.pop(number)







        #
        #     TemporaryList.append(PositionTuple)
        #
        #     if x == 0:
        #         TemporaryList = ListOfPositions
        #
        #
        #     #print(TemporaryList)
        #     #print(TemporaryList[0][0])
        #
        # if TemporaryList[0][0] < ListOfPositions[lenght][0] and x > 0:
        #
        #     deleteItems = ListOfPositions[lenght][0] - TemporaryList[0][0] - 1
        #
        #     for i in range(0, deleteItems):
        #         TemporaryList.pop(i)
        #
        #     ListOfPositions.append(TemporaryList)
        #     print(ListOfPositions)
        #
        #
        #
        # utime.sleep(2)

















            # if TemporaryList[jsonValue["timestamp"]] == ListOfPositions[jsonValue["timestamp"]]:
            #     TemporaryList.pop(PositionTuple)
            #
            # else:
            #     ListOfPositions.append(PositionTuple)

        # for i in range(40):
        #     # print(ListOfPositions[i])
        #     CurAzimuth = str(ListOfPositions[i][1])
        #     CurElev = str(ListOfPositions[i][2])






        # global PositionTuple, ListOfPositions
        #
        # seconds = "40"
        # url = "https://api.n2yo.com/rest/v1/satellite/positions/" + "39469" + "/" + latitude + "/" + longitude + "/" + ObserverAltitude + "/" + seconds + "/&apiKey=" + licenseKey
        # GetPositions = urequests.get(url).text
        # GetPositions_json = ujson.loads(GetPositions)
        #
        # ListOfPositions = []
        # hilfelist = []
        #
        # for i in range(0, 30):  # list naplnim
        #     hilfelist.append(i)
        #
        # for x in hilfelist:
        #     timestamp = int(ujson.dumps(GetPositions_json["positions"][x]["timestamp"]))
        #     timestamp = timestamp + (3600 * settings.timezone)
        #     azimuth = float(ujson.dumps(GetPositions_json["positions"][x]["azimuth"]))
        #     elevation = float(ujson.dumps(GetPositions_json["positions"][x]["elevation"]))
        #
        #     PositionTuple = (timestamp, azimuth, elevation)
        #     ListOfPositions.append(PositionTuple)
        #
        # utime.sleep(10)

#def PrintPass():









    # while True:
    #     if utime.time() == ListOfPositions[1][0]:
    #
    #         for i in len(ListOfPositions):
    #             print(ListOfPositions[i][2])
    #             settings.lcd.clear()
    #             CurAzimuth = str(ListOfPositions[i][1])
    #             CurElev = str(ListOfPositions[i][2])
    #             settings.lcd.putstr("az: " + CurAzimuth + "        el: " + CurElev)
    #
    #             utime.sleep(1)
    #
    #         break
    #     break
    # # Pass_start.pop(1)
    # # Pass_end.pop[DownloadForDesiredPass.RawID]
    # # CurrentSatName.pop(RawID)
# def test():
#     machine.freq(240000000)
#     seconds = "30" #zde lze menit velikost, 40 sekund zvlada, napr 50 uz ne
#     url = "https://api.n2yo.com/rest/v1/satellite/positions/39469/49.3125/17.3750/0/"+seconds+"/&apiKey=TLX2JG-94DFXJ-K57JEF-4XB1"
#     #url = "https://api.n2yo.com/rest/v1/satellite/positions/" + "39469" + "/" + latitude + "/" + longitude + "/" + ObserverAltitude + "/" + seconds + "/&apiKey=" + licenseKey
#
#
#
#     GetPositions = urequests.get(url).text
#
#     GetPositions_json = ujson.loads(GetPositions)
#
#
#     global ListOfPositions
#     ListOfPositions = []
#     hilfelist = []
#
#     for i in range(0, 30):  # list naplnim
#         hilfelist.append(i)
#
#     for x in hilfelist:
#         timestamp = int(ujson.dumps(GetPositions_json["positions"][x]["timestamp"]))
#         timestamp = timestamp + (3600 * settings.timezone)
#         azimuth = float(ujson.dumps(GetPositions_json["positions"][x]["azimuth"]))
#         elevation = float(ujson.dumps(GetPositions_json["positions"][x]["elevation"]))
#
#         PositionTuple = (timestamp, azimuth, elevation)
#         ListOfPositions.append(PositionTuple)
#
#     while True:
#         if utime.time() == ListOfPositions[1][0]:
#
#             for i in hilfelist:
#                 print(ListOfPositions[i][2])
#                 settings.lcd.clear()
#                 CurAzimuth = str(ListOfPositions[i][1])
#                 CurElev = str(ListOfPositions[i][2])
#                 settings.lcd.putstr("az: " + CurAzimuth + "        el: " + CurElev)
#
#                 utime.sleep(1)
#
#             break
#         break
#
#

